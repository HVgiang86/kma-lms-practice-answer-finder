//var _privateLog = console.log;
	
function encodeHTML(str){
    return str.replace(/([\u00A0-\u9999<>&])(.|$)/g, function(full, char, next) {
      if(char !== '&' || next !== '#'){
        if(/[\u00A0-\u9999<>&]/.test(next))
          next = '&#' + next.charCodeAt(0) + ';';

        return '&#' + char.charCodeAt(0) + ';' + next;
      }
      return full;
    });
}

function GET(url, params, callback) {
	$.get(getUrlAutoLink(url), params, callback);
}
function POST(url, params, callback) {
	$.post(getUrlAutoLink(url), params, callback);
}
function getUrlAutoLink(url) {
	let href = window.location.href;
	if(href.indexOf('http://127.0.0.1') > -1 || href.indexOf('http://localhost:') > -1){
//		url = 'https://new-dot-comaiphuong-edu.appspot.com' + (url.startsWith('/') ? '' : '/') + url;
	}
	return url;
}
var getUrlParam = function(parameter, defaultvalue){
	const queryString = window.location.search;
	const urlParams = new URLSearchParams(queryString);
	if (urlParams.get(parameter) && urlParams.get(parameter).trim().length > 0)
		return urlParams.get(parameter);
	else return defaultvalue
}

function getDocumentLink(){
	let href = window.location.href;
	if(href.indexOf('http://127.0.0.1') > -1 || href.indexOf('http://localhost:') > -1){
		//return "https://dev-dot-ielts-fighters.appspot.com";
	}
	return "";
}

//cookie 
function createCookie(name,value,days) {
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 *1000));
        var expires = "; expires=" + date.toGMTString();
    } else {
        var expires = "";
    }
    document.cookie = name + "=" + value + expires + "; path=/";
}
function eraseCookie(name) {
    createCookie(name,"",-1);
}
jQuery(document).ready(function ($) {
	// content-revert-url
	$.each($('.content-revert-url'), function(index, elem){
		$(elem).html($(elem).html().replace(/___/g, '.').replace(/---/g, '://'));
	});
	initButtonLoading();
	var c1 = true, c2 = true;
	$(window).scroll(function() { // is not moblie
	    if ($(this).scrollTop() >= 51) {        // If page is scrolled more than 50px
	        if(c1){
	        	$('#return-to-top').fadeIn(200);    // Fade in the arrow
		        $('#btn-searchCard').css("display", 'none');
		        $("#navbar-primary").append($("#ul-login"));
	        }
	        c1 = false;
	        c2 = true;
	    } else {
	       if(c2){
	    	   	$('#return-to-top').fadeOut(200);   // Else fade out the arrow
				$('#btn-searchCard').css("display", 'block');
				$("#navbar-login").append($("#ul-login"));
	       }
	       c1 = true;
	       c2 = false;
	    }
	});
	
	$('#preloader').fadeOut('slow',function(){
	});
	
	$('#return-to-top').click(function() {      // When arrow is clicked
	    $('body,html').animate({
	        scrollTop : 0                       // Scroll to top of body
	    }, 500);
	});

	if($(window).width() <768) {
		$("#navbar-primary").append($("#ul-login"));
		$("#navbar-login").empty();
	}
	
	$( window ).resize(function() {
		if($(window).width() <768) {
			$("#navbar-primary").append($("#ul-login"));
			$("#navbar-login").empty();
		} else {
			$("#navbar-login").append($("#ul-login"));
		}
	});
	
//	loadUserInfoProvince();
	loadUserInfoSchool();
	try {
		initTimeOnSite();
	} catch (e) {
	}
	checkVideosPanel();
	// laxy loading iframe
	$.each($('my-iframe'), function(index, elem){
		replaceElementTag(elem, 'iframe');
	});
});
function checkVideosPanel(element) {
	var videosPanel = $('.check-videos-panel');
	if(videosPanel && videosPanel.length > 0){
		var cdnUrl = 'https://cdn.jwplayer.com/libraries/pXaOZJzQ.js';
		importJsUrls(
//				'/loxolivestream/loxolivestream.nocache.js', 
				'/resources/js/video/iframe_youtube.js', 
				'/resources/js/video/YoutubePlayVideo.js', 
//				'/resources/js/video/video.js',
//				'/resources/js/video/videojs-http-streaming.js',
//				'/resources/js/video/videojs.cuepoints.js',
//				'/resources/js/video/VideoPlayer.js',
				cdnUrl
				);
		$.each(videosPanel, function(i, element){
			var courseId = $(element).attr('data-course-id');
			var topicId = $(element).attr('data-topic-id');
//			console.log('checkVideosPanel', courseId, topicId);
			$.each($(element).find('*[src-video-js]'), function(j, videoPanel){
				let videoWrapper = $('<div class="video-panel-video-js"></div>');
				videoPanel = $(videoPanel);
				videoPanel.replaceWith(videoWrapper);
				videoWrapper.append(videoPanel);
				if(!(typeof showVideoContentWithData === 'function')){
					videoWrapper.addClass('loading');
				}
				videoWrapper.click(function(){
					//console.log('open ', videoPanel.attr('src-video-js'), videoPanel.attr('class'));
					if(!videoWrapper.hasClass('loading')){
						videoWrapper.addClass('loading');
						if(typeof showVideoContentWithData === 'function'){
							var dataVideo = videoPanel.attr('src-video-js');
							if(dataVideo){
								dataVideo = dataVideo.replaceAll("thaychodau3gachngang", "---");
							}
							showVideoContentWithData(dataVideo, courseId, topicId);
							videoWrapper.removeClass('loading');
						} else {
//							showToasterError('Có lỗi xảy ra, thử lại sau!');
							setTimeout(function(){
								typeof showVideoContentWithData === 'function' && showVideoContentWithData(videoPanel.attr('src-video-js'), courseId, topicId);
								videoWrapper.removeClass('loading');
							}, 5000);
						}
					}
				});
			});
		});
	}
}
var provinceData;
function loadUserInfoProvince(element, callback){
	if(!!provinceData){
		importProvinceData(provinceData, element, callback);
		return;
	}
	$.getJSON("/resources/data/province.json", function(province) {
		provinceData = province;
		importProvinceData(province, element, callback);
	});
}
function importProvinceData(province, element, callback) {
	let provinceElement = $('#res-province');
	provinceElement.empty();
	element && $(element).empty();
	let vs = element ? $(element).data('value') : provinceElement.data('value');
	province && province.forEach(function(item){
		var option = '<option data-tokens="'+stringReplaceUrlForName(item.name)+'" value="'+item.id+'" '+(item.id == vs ? 'selected="true"' : '')+'>' + item.name + '</option>';
		provinceElement.append($(option));
		element && $(element).append($(option));
	});
	provinceElement.selectpicker();
	element && $(element).selectpicker();
	callback && callback();
}

function loadUserInfoSchool(){
	$('#user-info-school').append('<option value="0">Chọn trường</option>')
}
function scrollToElement(parentSelector, targetSelector, offsetTop) {
//	console.log("ScrolltoElem : ", parentSelector, $(targetSelector).offset());
	$(parentSelector).animate({
    	scrollTop: $(targetSelector).offset().top - (offsetTop ? offsetTop : 0)
  	}, 300, function(){
    });
}
function scrollToElementNew(parentSelector, targetSelector, offsetTop) {
//	console.log("ScrolltoElem : ", parentSelector, $(targetSelector).offset());
	$(parentSelector).animate({
    	scrollTop: $(targetSelector).offset().top - (offsetTop ? offsetTop : 0) - $(targetSelector).height() / 5
  	}, 300, function(){
    });
}
/* validation function */
function validationPhoneNumber(phone){
	var regEx = /(09|08|02|03|04|05|06|07|01[1|2|3|4|5|6|7|8|9])+([0-9]{8})\b$/;
	return regEx.test(String(phone).toLowerCase());
}

function validateEmail(email) {
    var pattern = /^[a-zA-Z0-9.!#$%&'*+=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/igm;
    return pattern.test(String(email).toLowerCase());
}
function validateAccount(account) {
	var patternAccount = /^[0-9a-zA-Z]+$/;
	return patternAccount.test(String(account).toLowerCase());
}
function validateVietnameseCharacters(content) {
	var pattern = /^[0-9a-zA-Z_ ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ\\s]+$/;
	return pattern.test(String(content).toLowerCase());
}
/* validation function */

function getMd5(s) {
	var hash = md5(s);
	return hash;
}
function encryptByDES(message, key) {
	var keyHex = CryptoJS.enc.Utf8.parse(key);
	var encrypted = CryptoJS.DES.encrypt(message, keyHex, {
		mode : CryptoJS.mode.ECB,
		padding : CryptoJS.pad.Pkcs7
	});
	return encrypted.toString();
}
function decryptByDES(ciphertext, key) {
    var keyHex = CryptoJS.enc.Utf8.parse(key);
    // direct decrypt ciphertext
    var decrypted = CryptoJS.DES.decrypt({
        ciphertext: CryptoJS.enc.Base64.parse(ciphertext)
    }, keyHex, {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    });
    return decrypted.toString(CryptoJS.enc.Utf8);
}

function getCookie(cname) {
	  var name = cname + "=";
	  var decodedCookie = decodeURIComponent(document.cookie);
	  var ca = decodedCookie.split(';');
	  for(var i = 0; i <ca.length; i++) {
	    var c = ca[i];
	    while (c.charAt(0) == ' ') {
	      c = c.substring(1);
	    }
	    if (c.indexOf(name) == 0) {
	      return c.substring(name.length, c.length);
	    }
	  }
	  return "";
}

/* cirlce progress */
// html: <div id='topic-progress-id-"+topicId+"' class='topic-progress-circle-point' data-progress='"+progressValue+"'></div>
// init: circleProgress(progresies[i], 0.7, "#00aa0c", "#00aa0c", "#ddd", false, 30, 2);
function circleProgress(el, fontSize, color, percentColor, roundColor, isshowIcon, size, lineWidth) {
	if(el == null || typeof(el) == 'undefined' || el.childNodes.length > 0){
		return;
	}
	var percent = el.getAttribute("data-progress");
	var type = el.getAttribute("data-type");
	percent = parseInt(percent);
	var options = {
	    percent: percent,
	    size: size,
	    lineWidth: lineWidth,
	    rotate: 0
	}
	var canvas = document.createElement('canvas');
	canvas.setAttribute('class', 'progress-canvas');
	var span = document.createElement('span');
	span.setAttribute('class', 'progress-text');
	span.style.width = size + 'px';
	span.style.height = size + 'px';
	span.style.lineHeight = size + 'px';
	span.style.position = 'absolute';
	span.style.fontSize = fontSize +'em';
	span.style.color = color;
	var img = document.createElement('img');
	img.style.width = "calc(100% + 2px)";
	span.style.display = "flex";
	span.style.alignItems = "center";
	span.style.justifyContent = "center";
	if(options.percent >= 100 && type != 2){
		img.src = "/resources/images/classes/icon-smile.png";
		span.appendChild(img);
		span.setAttribute('class', 'progress-text-done');
		span.style.fontSize = fontSize *3 +'em';
		span.appendChild(img);
	} else if(options.percent >= 0){
		if(!isshowIcon){
			span.setAttribute('class', 'progress-text');
			span.textContent = options.percent + '%';
		}
	}
	if(options.percent == 0){
		if(isshowIcon){
			img.src = "/resources/images/classes/icon-un-smile.png";
			span.appendChild(img);
			span.setAttribute('class', 'progress-text-not-done');
			span.style.fontSize = fontSize *3 +'em';
		}
	}
	if (typeof(G_vmlCanvasManager) !== 'undefined') {
	    G_vmlCanvasManager.initElement(canvas);
	}
	var ctx = canvas.getContext('2d');
	canvas.width = canvas.height = options.size;
	el.appendChild(span);
	el.appendChild(canvas);
	ctx.translate(options.size / 2, options.size / 2);
	ctx.rotate((-1 / 2 + options.rotate / 180) * Math.PI);
	var radius = (options.size - options.lineWidth) / 2;
	var drawCircle = function(color, lineWidth, percent) {
        percent = Math.min(Math.max(0, percent || 1), 1);
        ctx.beginPath();
        ctx.arc(0, 0, radius, 0, Math.PI * 2 * percent, false);
        ctx.strokeStyle = color;
        ctx.lineCap = 'round';
        ctx.lineWidth = lineWidth
        ctx.stroke();
	};
	if(roundColor === undefined || roundColor == null || roundColor.length === 0){
		drawCircle('#efefef', options.lineWidth, 100 / 100);
	} else {
		drawCircle(roundColor, options.lineWidth, 100 / 100);
	}
	if(options.percent > 0){
		if(percentColor === undefined || percentColor == null || percentColor.length === 0){
		drawCircle('#555555', options.lineWidth, options.percent / 100);
		} else {
			drawCircle(percentColor, options.lineWidth, options.percent / 100);
		}
	}
}
/* cirlce progress */
/* button loading */
function updateStateButtonLoading(element, state, exprire) {
	let button = $(element);
	button.css('position', 'relative');
	let buttonHtml = button.attr('data-text');
	let isDisabled = button.attr('data-state-disabled');
	isDisabled = typeof isDisabled === 'undefined' ? true : isDisabled;
	const timeExprireDefault = 2000;
	buttonHtml = buttonHtml ? buttonHtml : button.html();
	button.attr('data-text', buttonHtml);
	let temp = '<span style="visibility:hidden">'+buttonHtml+'</span>';
	let p = 'calc(50% - '+button.css('font-size')+'/2)';
	let style = 'top:'+p+';left:'+p;
	if(state === 'run' || state === 'loading'){
		button.html('<i style="position:absolute;'+style+'" class="fas fa-spinner-third fa-spin"></i>' + temp);
		isDisabled && button.prop('disabled', true);
	} else if(state === 'stop' || state === 'none'){
		button.html(buttonHtml);
		isDisabled && button.prop('disabled', false);
	} else if(state === 'success'){
		button.html('<i style="position:absolute;'+style+'" class="far fa-check"></i>' + temp);
		isDisabled && button.prop('disabled', true);
		exprire = exprire ? exprire : timeExprireDefault;
	} else if(state === 'failed'){
		button.html('<i style="position:absolute;'+style+';color:red" class="far fa-times"></i>' + temp);
		isDisabled && button.prop('disabled', true);
		exprire = exprire ? exprire : timeExprireDefault;
	}
	if(exprire && exprire > 0){
		setTimeout(() => {
			button.html(buttonHtml);
			isDisabled && button.prop('disabled', false);
		}, exprire);
	}
}

function initButtonLoading(){
	$('.buttonLoading').each(function(index, elem){
		let button = $(elem);
		button.attr('data-text', button.html());
		let state = button.data('state');
		if(state){
			updateStateButtonLoading(button, state);
		}
	});
}
/* button loading */
/* star panel */
function drawSelectStarPanel(starPanel, callback) {
	var fontSize = starPanel.getAttribute('data-size');fontSize = fontSize ? fontSize : "14px";
	starPanel.setAttribute('data-size', fontSize);
	var color = starPanel.getAttribute('data-color');color = color ? color : "#ffc639";
	starPanel.setAttribute('data-color', color);
	const colorNoneSelect = "#ddd";
	starPanel.setAttribute('data-color-none', colorNoneSelect);
	starPanel.style.fontSize = fontSize;
	var starContent = document.createElement('span');
	for(var j = 0; j < 5; j++) {
		var star = document.createElement('i');
		star.className = "fa fa-star";
		star.style.cursor = 'pointer';
		star.style.color = colorNoneSelect;
		starContent.appendChild(star);
		addClickHandle(star, j);
	}
	starPanel.appendChild(starContent);
	function addClickHandle(star, index) {
		star.onmouseover = function() {
			resetStar();
			starContent.childNodes.forEach((e, i) => {
				if(i <= index){
					e.style.color = color;
				}
			});
		};
		var selected = false;
		star.onmouseout = function() {
			!selected && resetStar();
		};
		star.onclick = function (){
			callback && callback(index + 1);
			selected = true;
		};
	}
	function resetStar() {
		starContent.childNodes.forEach(e => {
			e.style.color = colorNoneSelect;
		});
	}
}
function drawStarPanel(starPanel, callback) {
	if(starPanel.getAttribute('data-render-state') == 1){
		return;
	}
	var total = starPanel.getAttribute('data-total');total = total ? parseInt(total) : 0;total = isNaN(total) ? 0 : total;
	var score = starPanel.getAttribute('data-score');score = score ? parseFloat(score) : 0;score = isNaN(score) ? 0 : score;
	var showTotal = starPanel.getAttribute('data-show-total');showTotal = !showTotal || showTotal === 'true';
	var showScore = starPanel.getAttribute('data-show-score');showScore = !showScore || showScore === 'true';
	var color = starPanel.getAttribute('data-color');color = color ? color : "#f5af00";
	const colorNoneSelect = "#ddd";
	var fontSize = starPanel.getAttribute('data-size');fontSize = fontSize ? fontSize : "14px";
	starPanel.style.fontSize = fontSize;
	if(showScore) {
		var s = document.createElement('span');
		s.innerHTML = "("+score+")";
		s.style.fontSize = "0.8em";
		s.style.marginRight = "3px";
		starPanel.appendChild(s);
	}
	var scoreInt = parseInt(score);
	var starContent = document.createElement('span');
	if(callback){
		starContent.style.cursor = 'pointer';
	}
	for(var j = 0; j < 5; j++) {
		var star = document.createElement('i');
		star.className = "fa fa-star";
		if(scoreInt > j){
			star.style.color = color;
		} else {
			star.style.color = colorNoneSelect;
		}
		star.setAttribute('data-index', j);
		starContent.appendChild(star);
		if(callback){
			star.addEventListener("click", function(){
				callback(this.getAttribute('data-index'));
			});
		}
	}
	starPanel.appendChild(starContent);
	if(score - scoreInt > 0.3){
		var halfStar = starContent.childNodes[scoreInt];
		if(halfStar){
			halfStar.className = "fa fa-star-half-o";
			halfStar.style.color = color;
		}
	}
	if(showTotal) {
		var t = document.createElement('span');
		t.innerHTML = "("+total+")";
		t.style.fontSize = "0.8em";
		t.style.marginLeft = "3px";
		starPanel.appendChild(t);
	}
	starPanel.setAttribute('data-render-state', 1);
}
/* star panel */
/* evaluate panel */
function drawChartEvaluate(evaluatePanel, data, callback){
	evaluatePanel.innerHTML = "";
	const colors = { 1:'#ff6f31', 2:'#ff9f02', 3:'#ffcf02', 4:'#9ace6a', 5:'#57bb8a' };
    evaluatePanel.style.width = "500px";
    evaluatePanel.style.display = "flex";
    evaluatePanel.className = "main-evaluate-panel";
    var leftPanel = document.createElement('div');
    leftPanel.className = "left-panel";
    var centerLine = document.createElement('div');
    centerLine.className = "center-line";
    var rightPanel = document.createElement('div');
    rightPanel.className = "right-panel";
    evaluatePanel.appendChild(leftPanel);
    evaluatePanel.appendChild(centerLine);
    evaluatePanel.appendChild(rightPanel);

    var totalNumber = document.createElement('h1');
    var starPanel = document.createElement('div');
    starPanel.className = "star-panel";
    var totalEvaluate = document.createElement('div');
    leftPanel.appendChild(totalNumber);
    leftPanel.appendChild(starPanel);
    leftPanel.appendChild(totalEvaluate);
    var total = 0;
    var keys = Object.keys(data);
    var maxValue = Math.max.apply(Math, Object.values(data));
    var totalValue = 0;
    keys.forEach(key => {
        total += key * data[key];
        totalValue += data[key];
    });
    var rateStar = 0;
    if(totalValue > 0){
    	rateStar = total/totalValue;
    }
    var rateStarValue = Math.round(rateStar * 10) / 10;
    totalNumber.innerHTML = rateStarValue;
    starPanel.setAttribute('data-total', totalValue);
    starPanel.setAttribute('data-score', rateStarValue);
    starPanel.setAttribute('data-show-total', false);
    starPanel.setAttribute('data-show-score', false);
    starPanel.setAttribute('data-size', "16px");
    starPanel.classList.add('star-panel-eveluate');
    drawStarPanel(starPanel, callback);
    totalEvaluate.innerHTML = "<i class='fa fa-user'></i> " + totalValue + " " + localize.vote;
    totalEvaluate.style.color = "#555";
    totalEvaluate.style.paddingTop = "10px";
    keys.reverse().forEach(key => {
        var evaluateItem = document.createElement('div');
        evaluateItem.className = "evaluate-item";
        var label = document.createElement('label');
        var evaluateContentPanel = document.createElement('div');
        var evaluateContent = document.createElement('div');
        label.innerHTML = key;
        var v = data[key];
        var cc = (v / maxValue) * 100;
        if(cc > 0){
        	evaluateContent.style.width = cc + "%";
        } else {
        	evaluateContent.style.width = "";
        }
        evaluateContent.style.backgroundColor = colors[key];
        evaluateContent.innerHTML = "(" + v + ")";
        evaluateContentPanel.appendChild(evaluateContent);
        evaluateItem.appendChild(label);
        evaluateItem.appendChild(evaluateContentPanel);
        rightPanel.appendChild(evaluateItem);
    });
}
/* evaluate panel */

/* format time */
function formatDate(date, showTime, showSecond) {
	if(!(date instanceof Date)){
		date = new Date(date);
	}
	var day = date.getDate();
	var month = date.getMonth() + 1;
	var year = date.getFullYear();
	
	var timeString = (day < 10 ? "0" + day : day) + '/' + (month < 10 ? "0" + month : month) + '/' + year;
	if(!!showTime){
		var h = date.getHours();
		var m = date.getMinutes();
		var s = date.getSeconds();
		return (h<10?"0"+h:h)+":"+(m<10?"0"+m : m)+(typeof showSecond === 'undefined' || showSecond === true ? (":"+(s<10?"0"+s:s)):'')+" "+timeString;
	}
	return timeString;
}
/* format time */

/* encode for html */
function encodeForHTML(value) {
	if(!value){
		return value;
	}
	var lt = /</g, gt = />/g, ap = /'/g, ic = /"/g;
	return value.toString().replace(lt, "&lt;").replace(gt, "&gt;").replace(ap, "&#39;").replace(ic, "&#34;");
}

/* dropdown panel */
function dropdownPanel(b, mp, onFadeToggle, styleName) {
	var button = $(b);
	var mainPanel = $(mp);
	if(!button.hasClass('button-widget-ks-dropdown')){
		button.addClass("button-widget-ks-dropdown");
	}
	if(mainPanel.hasClass('menu-widget-ks-dropdown')){
		mainPanel.addClass("menu-widget-ks-dropdown");
	}
	if(styleName){
		mainPanel.addClass(styleName);
	} else {
		mainPanel.css('width', "300px");
		mainPanel.css('height', "400px");
	}
	if(button.parent().hasClass('main-ks-dropdown')){
		button.parent().addClass("main-ks-dropdown");
	}
	button.off('click').click(function () {
		mainPanel.fadeToggle('fast', 'linear', function () {
			onFadeToggle && onFadeToggle();
		});
        return false;
    });
    $(document).click(function () {
        mainPanel.hide();
    });
    mainPanel.off('click').click(function (e) {
        return false;
    });
}
/* dropdown panel */
if (!String.prototype.startsWith) {
    Object.defineProperty(String.prototype, 'startsWith', {
        value: function(search, pos) {
            pos = !pos || pos < 0 ? 0 : +pos;
            return this.substring(pos, pos + search.length) === search;
        }
    });
}

function addUrlWithParams(params) {
	var rootUrl = window.location.pathname.substr(0);
	var hash = window.location.hash;
	var search = window.location.search;
	if(params){
		if(search && params.startsWith('\?')){
			params = params.replace('?', '');
		} else if(search && !params.startsWith('&')) {
			params = '&'+params;
		} else if(!search && !params.startsWith('\?')) {
			params = '?' + params;
		} else if(!search && params.startsWith('&')) {
			params = params.replace('&', '?');
		}
	}
	window.history.pushState({},"", rootUrl + search + (params ? params : "") + (hash ? hash : ""), "", "");
}

function replaceUrlWithParams(params) {
	var rootUrl = window.location.pathname.substr(0);
	var hash = window.location.hash;
	if(params && !params.startsWith('?')){
		params = '?' + params;
	}
	window.history.pushState({},"", rootUrl + (params ? params : "") + (hash ? hash : ""), "", "");
}

function replaceUrlWithParamsAndHash(params, hash) {
	var rootUrl = window.location.pathname.substr(0);
	if(params && !params.startsWith('?')){
		params = '?' + params;
	}
	if(hash && !hash.startsWith('#')){
		hash = '#' + hash;
	}
	window.history.pushState({},"", rootUrl + (params ? params : "") + (hash ? hash : ""), "", "");
}

const SPECIAL_CHARACTERS = {"À":0,"Á":1,"Â":2,"Ã":3,"È":4,"É":5,"Ê":6,"Ì":7,"Í":8,"Ò":9,"Ó":10,"Ô":11,"Õ":12,"Ù":13,"Ú":14,"Ý":15,"à":16,"á":17,"â":18,"ã":19,"è":20,"é":21,"ê":22,"ì":23,"í":24,"ò":25,"ó":26,"ô":27,"õ":28,"ù":29,"ú":30,"ý":31,"Ă":32,"ă":33,"Đ":34,"đ":35,"Ĩ":36,"ĩ":37,"Ũ":38,"ũ":39,"Ơ":40,"ơ":41,"Ư":42,"ư":43,"Ạ":44,"ạ":45,"Ả":46,"ả":47,"Ấ":48,"ấ":49,"Ầ":50,"ầ":51,"Ẩ":52,"ẩ":53,"Ẫ":54,"ẫ":55,"Ậ":56,"ậ":57,"Ắ":58,"ắ":59,"Ằ":60,"ằ":61,"Ẳ":62,"ẳ":63,"Ẵ":64,"ẵ":65,"Ặ":66,"ặ":67,"Ẹ":68,"ẹ":69,"Ẻ":70,"ẻ":71,"Ẽ":72,"ẽ":73,"Ế":74,"ế":75,"Ề":76,"ề":77,"Ể":78,"ể":79,"Ễ":80,"ễ":81,"Ệ":82,"ệ":83,"Ỉ":84,"ỉ":85,"Ị":86,"ị":87,"Ọ":88,"ọ":89,"Ỏ":90,"ỏ":91,"Ố":92,"ố":93,"Ồ":94,"ồ":95,"Ổ":96,"ổ":97,"Ỗ":98,"ỗ":99,"Ộ":100,"ộ":101,"Ớ":102,"ớ":103,"Ờ":104,"ờ":105,"Ở":106,"ở":107,"Ỡ":108,"ỡ":109,"Ợ":110,"ợ":111,"Ụ":112,"ụ":113,"Ủ":114,"ủ":115,"Ứ":116,"ứ":117,"Ừ":118,"ừ":119,"Ử":120,"ử":121,"Ữ":122,"ữ":123,"Ự":124,"ự":125,"Ỹ":126,"Ỳ":127};
const REPLACEMENTS = ["A","A","A","A","E","E","E","I","I","O","O","O","O","U","U","Y","a","a","a","a","e","e","e","i","i","o","o","o","o","u","u","y","A","a","D","d","I","i","U","u","O","o","U","u","A","a","A","a","A","a","A","a","A","a","A","a","A","a","A","a","A","a","A","a","A","a","A","a","E","e","E","e","E","e","E","e","E","e","E","e","E","e","E","e","I","i","I","i","O","o","O","o","O","o","O","o","O","o","O","o","O","o","O","o","O","o","O","o","O","o","O","o","U","u","U","u","U","u","U","u","U","u","U","u","U","u","Y","Y"];	
function stringReplaceUrl(str, regexReplace) {
	var result = '';
	for(var i = 0; i < str.length; i++){
		var c = str.charAt(i);
		if(SPECIAL_CHARACTERS[c]){
			c = REPLACEMENTS[SPECIAL_CHARACTERS[c]];
		}
		result += c;
	}
	return result.replace(/[^a-zA-Z0-9_-]/g,regexReplace ? regexReplace : '-').replace(/-{2,}/g, '-').replace(/--/g, '-').toLowerCase();
}
function stringReplaceText(str) {
	return stringReplaceUrl(str, ' ');
}
function stringReplaceUrlForName(str) {
	var result = '';
	for(var i = 0; i < str.length; i++){
		var c = str.charAt(i);
		if(SPECIAL_CHARACTERS[c]){
			c = REPLACEMENTS[SPECIAL_CHARACTERS[c]];
		}
		result += c;
	}
	return result.replace(/[^a-zA-Z0-9_-]/g, ' ').toLowerCase();
}
function initTable(element, titles, dataSet, renderItemCallback, searchPlaceholder, pageFunction) {
	var _ts = [];
	titles.forEach(function(t, i){
		_ts.push({
			title: t, 
			className: "column-" + i
		});
	});
	var _renderItemO = {};
	if(_renderItemO){
		_renderItemO = {"targets": renderItemCallback.target,  render: renderItemCallback.callback }
	}
	var _is = $(element).DataTable({
		"searching": false,
//		"bPaginate": false,
		"bLengthChange": false,
		"dom": '<"top"f>rt<"bottom"ipl><"clear">',
		data: dataSet,
		columns: _ts,
			"columnDefs": [ {
			"searchable": false,
            "orderable": false,
            "targets": 0
        	},
        	_renderItemO
        ],
       	//"order": [[ 1, 'asc' ]],
        "language": {
            "lengthMenu": "Hiển thị  _MENU_  /Trang",
            "zeroRecords": "Không tìm thấy kết quả phù hợp!",
            "info": pageFunction ?   " Tổng số: " + pageFunction.total : "Hiển thị _START_ - _END_ / tổng số _TOTAL_",
            "search":"Tìm kiếm:",
            "infoEmpty": "",
            "infoFiltered": "",
            "paginate": {
                "first":      "Đầu",
               "last":       "Cuối",
                "next":       "Sau",
                "previous":   "Trước"
            },
            "searchPlaceholder": searchPlaceholder ? searchPlaceholder : "Nhập tên"
        },
	});
	
	setTimeout(function(){
		if(typeof pageFunction === 'undefined' || pageFunction.paginate === false){
			$('.dataTables_paginate').remove();
		}
		if(pageFunction && pageFunction.offset >= pageFunction.limit){
			$('.dataTables_paginate').find('.paginate_button.previous').click(function(){
				pageFunction.changePage(false);
			});
		}
		if(pageFunction && pageFunction.offset < pageFunction.total){
			$('.dataTables_paginate').find('.paginate_button.next').click(function(){
				pageFunction.changePage(true);
			});
		}
		$('.dataTables_paginate').find('.paginate_button.current').hide();
	}, 100);
	$('.bottom').addClass('pull-flex');
	_is.on('order.dt search.dt', function () {
		_is.column(0, { search:'applied', order:'applied' }).nodes().each( function (cell, i) {
			cell.innerHTML = (pageFunction ? pageFunction.offset + i+1 : i+1);
		});
	}).draw();
	return _is;
}

function scrollToTop() {
	if ('scrollRestoration' in history) {
		history.scrollRestoration = 'manual';
	}
}

function fomatMoney(money){
	money = Math.round(money * 10)/10;
	return Intl.NumberFormat().format(money);
}
function getLinkTopic(name, id) {
	return "/bai-hoc/"+stringReplaceUrl(name)+"-" + id;
}

function getLinkExam(name, id) {
	return "/de-thi/"+stringReplaceUrl(name)+"-" + id;
}

/* import js */
const mapScriptImported = [];
var mapCountLoadScript = {
	datas: [],
	maxCount: 0,
	count: 0
};
function importJsUrls(...urls) {
	mapCountLoadScript.maxCount += 1;
	mapCountLoadScript.datas = mapCountLoadScript.datas.concat(urls.filter(function(url){
		return mapCountLoadScript.datas.indexOf(url) < 0;
	}));
	//setTimeout(function(){
		var scripts = document.getElementsByTagName('script');
		$.each(scripts, function(index, script){
			var src = script.getAttribute('src');
			src && mapScriptImported.indexOf(src) < 0 && mapScriptImported.push(src);
		});
		mapCountLoadScript.count += 1;
		if(mapCountLoadScript.count == mapCountLoadScript.maxCount){
			mapCountLoadScript.datas.forEach(function(url){
				if(mapScriptImported.indexOf(url) < 0){
					var imported = document.createElement('script');
					imported.src = url;
					imported.async = true;
					document.head.appendChild(imported);
				}
			});
		}
	//}, 2000);
}

function importJsContent(content, type) {
	let head = document.querySelector('head');
	if(head){
		let script = document.createElement('script');
		type && script.setAttribute('type', type);
		script.innerHTML = content;
		head.appendChild(script);
	}
}

/* import js */
/* import css */
function imporCss(...urls) {
//	console.log('imporCss', urls);
	let head = document.querySelector('head');
	if(head){
		urls.forEach(function(url) {
			if(url){
//				console.log('url', url);
				let link = document.createElement('link');
				link.setAttribute('rel', 'stylesheet');
				link.setAttribute('type', 'text/css');
				link.setAttribute('href', url);
				head.appendChild(link);
			}
		});
	}
}
/* import css */
/* exitFullscreen */
function exitFullscreen() {
    var isInFullScreen = (document.fullscreenElement && document.fullscreenElement !== null) ||
        (document.webkitFullscreenElement && document.webkitFullscreenElement !== null) ||
        (document.mozFullScreenElement && document.mozFullScreenElement !== null) ||
        (document.msFullscreenElement && document.msFullscreenElement !== null);

    var docElm = document.documentElement;
//    console.log('docElm: '+ JSON.stringify(docElm))
    if (!isInFullScreen) {
        /* if (docElm.requestFullscreen) {
            docElm.requestFullscreen();
        } else if (docElm.mozRequestFullScreen) {
            docElm.mozRequestFullScreen();
        } else if (docElm.webkitRequestFullScreen) {
            docElm.webkitRequestFullScreen();
        } else if (docElm.msRequestFullscreen) {
            docElm.msRequestFullscreen();
        } */
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
            document.webkitCancelFullScreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.msExitFullscreen) {
            document.msExitFullscreen();
        }
    }
}
/* exitFullscreen */

/* get -thumbnail */
function getThumbnailYoutubeById(videoId) {
	return "https://img.youtube.com/vi/"+videoId+"/0.jpg";
}

function getThumbnailFacebookById(id) {
	return "https://graph.facebook.com/"+id+"/picture";
}

function getThumbnailVimeoById(urlVideo, callback) {
	if(!urlVideo || urlVideo.indexOf("http") == -1){
		callback();
		return;
	}
	var url = "https://vimeo.com/api/oembed.json?url="+urlVideo;
	$.get(url, {}, function(data){
		if(data){
			if(data.thumbnail_url){
				callback(data.thumbnail_url);
				return;
			}
		}
		callback();
	});
}
/* get -thumbnail */
function getLoadingHtml(color, scale){
	var scaleStyle = scale ? 'transform:scale('+scale+');' : '';
	return "<div class=\"lds-spinner\" style=\""+scaleStyle+"margin: 0 auto;display:block;"+(color ? "color: "+color : "")+"\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>";
}

function countingLeftTime(expire, currentTime, callback, callbackEndTime){
	let timeExpire = expire - currentTime;
	queue();
    let time = setInterval(function(){
        timeExpire -= 1000;
        queue();
    }, 1000);
    
    function queue(){
    	callback(getLeftTimeToString(timeExpire));
        if(timeExpire <= 0){
        	callbackEndTime();
            clearInterval(time);
        }
    }
}

function getLeftTimeToString(milliseconds) {
  let seconds = parseInt(milliseconds / 1000) % 60 ;
  let minutes = parseInt((milliseconds / (1000 *60 )) % 60);
  let hours   = parseInt((milliseconds / (1000 * 60 * 60)) % 24);
  let days = parseInt((milliseconds / (1000 * 60 * 60)) / 24);
  let sb = '';
  if(hours < 10){
    sb += "0" + hours;
  } else {
    sb += hours;
  }
  sb += ":";
  if(minutes < 10){
    sb += "0" +minutes;
  } else {
    sb += minutes;
  }
  sb += ":";
  if(seconds < 10){
    sb += "0" +seconds;
  } else {
    sb += seconds;
  }
  return {'days': days, 'times' : sb};
}

function showLoadingWindow() {
	var loading = document.getElementById('preloader');
	if(loading) {
		loading.style.display = 'block';
	}
	//document.getElementById('preloader').style.display = 'block';
}
function hideLoadingWindow() {
	var loading = document.getElementById('preloader');
	if(loading) {
		loading.style.display = 'none';
	}
	//document.getElementById('preloader').style.display = 'none';
}

function getFullIpAddress(callback) {
 	var xmlHttp = new XMLHttpRequest();
	xmlHttp.onreadystatechange = function() { 
		if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
			callback && callback(xmlHttp.response);
//			var temp = 0;
//			setTimeout(function(){
//				if(temp == 0){
//					callback(xmlHttp.response);
//					callback = null;
//				}
//			}, 10000);
//			getIpClient(function(clientIp){
//				temp++;
//				callback && callback(xmlHttp.response + (clientIp ? '&'+clientIp : ''));
//			});
		}
	}
	xmlHttp.open("GET", '/get-ip-address', true);
	xmlHttp.send(null);
	function getIpClient(cb) {
		// NOTE: window.RTCPeerConnection is "not a constructor" in FF22/23
		var RTCPeerConnection = window.webkitRTCPeerConnection || window.mozRTCPeerConnection || window.RTCPeerConnection;
		if (RTCPeerConnection) {
		    var rtc = new RTCPeerConnection({iceServers:[]});
		    if (1 || window.mozRTCPeerConnection) {      // FF [and now Chrome!] needs a channel/stream to proceed
		        rtc.createDataChannel('', {reliable:false});
		    };
		    
		    rtc.onicecandidate = function (evt) {
		        // convert the candidate to SDP so we can run it through our general parser
		        // see https://twitter.com/lancestout/status/525796175425720320 for details
		        if (evt.candidate) grepSDP("a="+evt.candidate.candidate);
		    };
		    rtc.createOffer(function (offerDesc) {
		        grepSDP(offerDesc.sdp);
		        rtc.setLocalDescription(offerDesc);
		    }, function (e) { 
				console.warn("offer failed", e);
				cb(); 
			});
		    
		    var addrs = Object.create(null);
		    addrs["0.0.0.0"] = false;
		    function updateIp(newAddr) {
		        if (newAddr in addrs) return;
		        else addrs[newAddr] = true;
		        var displayAddrs = Object.keys(addrs).filter(function (k) { return addrs[k]; });
		        cb(displayAddrs.join(" or perhaps ") || "n/a");
		    }
		    
		    function grepSDP(sdp) {
				var hosts = [];
				sdp.split('\r\n').forEach(function (line) { // c.f. http://tools.ietf.org/html/rfc4566#page-39
					if (~line.indexOf("a=candidate")) {     // http://tools.ietf.org/html/rfc4566#section-5.13
						var parts = line.split(' '),        // http://tools.ietf.org/html/rfc5245#section-15.1
							addr = parts[4],
							type = parts[7];
						if (type === 'host') updateIp(addr);
					} else if (~line.indexOf("c=")) {       // http://tools.ietf.org/html/rfc4566#section-5.7
						var parts = line.split(' '),
							addr = parts[2];
							updateIp(addr);
					}
				});
			}
		} else {
			cb();
		}
	}
}

function getParamsFromUrl(key, url) {
	if(typeof URLSearchParams === 'undefined'){
		return getAllUrlParams(url)[key];
	}
	return new URLSearchParams(url ? url : window.location.search).get(key);
}

function getAllUrlParams(url) {

    // get query string from url (optional) or window
    var queryString = url ? url.split('?')[1] : window.location.search.slice(1);

    // we'll store the parameters here
    var obj = {};

    // if query string exists
    if (queryString) {

        // stuff after # is not part of query string, so get rid of it
        queryString = queryString.split('#')[0];

        // split our query string into its component parts
        var arr = queryString.split('&');

        for (var i = 0; i < arr.length; i++) {
            // separate the keys and the values
            var a = arr[i].split('=');

            // set parameter name and value (use 'true' if empty)
            var paramName = a[0];
            var paramValue = typeof (a[1]) === 'undefined' ? true : a[1];

            // (optional) keep case consistent
            paramName = paramName.toLowerCase();
            if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();

            // if the paramName ends with square brackets, e.g. colors[] or colors[2]
            if (paramName.match(/\[(\d+)?\]$/)) {

                // create key if it doesn't exist
                var key = paramName.replace(/\[(\d+)?\]/, '');
                if (!obj[key]) obj[key] = [];

                // if it's an indexed array e.g. colors[2]
                if (paramName.match(/\[\d+\]$/)) {
                    // get the index value and add the entry at the appropriate position
                    var index = /\[(\d+)\]/.exec(paramName)[1];
                    obj[key][index] = paramValue;
                } else {
                    // otherwise add the value to the end of the array
                    obj[key].push(paramValue);
                }
            } else {
                // we're dealing with a string
                if (!obj[paramName]) {
                    // if it doesn't exist, create property
                    obj[paramName] = paramValue;
                } else if (obj[paramName] && typeof obj[paramName] === 'string') {
                    // if property does exist and it's a string, convert it to an array
                    obj[paramName] = [obj[paramName]];
                    obj[paramName].push(paramValue);
                } else {
                    // otherwise add the property
                    obj[paramName].push(paramValue);
                }
            }
        }
    }

    return obj;
}

function setupPaypal(idname, amount, currency, callback, sandbox, production) {
	sandbox = sandbox ? sandbox : 'Ad1XGJZA8Qt860Xl3g6_btkvNxtTpjZ4hdf_W9vbZ7RHHF_OX-U5fnxZhBRI6IykiaSHQM6Ig5ZTI-yj';
	production = production ? production : 'AWV-wL_H5cDILUR8FRgqKMFGByse67zCNEj5tvvD4tcaMPs-O7r6HySb3HMI3Mp-foIDhyRQDOFYm2Nr';
    paypal.Button.render({
        env: 'production', // sandbox | production
        // PayPal Client IDs - replace with your own
        // Create a PayPal app: https://developer.paypal.com/developer/applications/create
        client: {
            sandbox: sandbox,
            production: production
        },
        // Show the buyer a 'Pay Now' button in the checkout flow
        commit: true,
        // payment() is called when the button is clicked
        payment: function(data, actions) {
            // Make a call to the REST api to create the payment
            return actions.payment.create({
                payment: {
                    transactions: [
                        {
                            amount: { total: amount, currency: currency }
                        }
                    ]
                }
            });
        },

        // onAuthorize() is called when the buyer approves the payment
        onAuthorize: function(data, actions) {

            // Make a call to the REST api to execute the payment
            return actions.payment.execute().then(function() {
            	typeof onPayPalPaymentCompleted === 'function' && onPayPalPaymentCompleted();
            	typeof callback === 'function' && callback();
            });
        }
    }, idname);
}
function convert2USD(amount, currency) {
	currency = currency.toLowerCase();
	if (currency.indexOf("usd") > -1) {
		return amount;
	}
	if (currency.indexOf("tr") > -1 && currency.indexOf("vnd") > -1) {
		return parseInt((amount * 1000000 * 100) / 22000) / 100;
	}
	if (currency.indexOf("vnd") > -1) {
		return parseInt((amount * 100) / 22000) / 100;
	}
	return amount;
}

function showToaster(message, timeout, type) {
	this.message = message;
	return $.toaster({message : message, settings : { timeout : timeout ? timeout : 3000 }, priority: type ? type : 'info' });
}

function showToasterSuccess(message, timeout) {
	this.message = message;
	return $.toaster({message : message, settings : { timeout : timeout ? timeout : 3000 }, priority: 'success' });
}

function showToasterInfo(message, timeout) {
	this.message = message;
	return $.toaster({message : message, settings : { timeout : timeout ? timeout : 3000 }, priority: 'info' });
}

function showToasterError(message, timeout) {
	this.message = message;
	return $.toaster({message : message, settings : { timeout : timeout ? timeout : 3000 }, priority: 'warning' });
}

function checkEmptyParentBlock(panel, parentName, name) {
	panel = $(panel);
	$.each(panel.parents(), function(index, elem){
 		if($(elem).hasClass(parentName)){
 			$(elem).attr(name, true);
 		}
 	});
	panel.hide();
}

function isDocumentJS(url) {
	return url.indexOf(".doc") > -1 || url.indexOf(".docx") > -1 || url.indexOf(".xls") > -1 || url.indexOf(".xlsx") > -1
		|| url.indexOf(".ppt") > -1 || url.indexOf(".pptx") > -1 || url.indexOf(".pdf") > -1;
}

function isImageJS(url) {
	return url.indexOf(".jpg") > -1 || url.indexOf(".jpeg")  > -1
		|| url.indexOf(".png") > -1 || url.indexOf(".gif") > -1;
}

function replaceElementTag(targetSelector, newTagString) {
	var rootElem = $(targetSelector);
	var newElem = $('<'+newTagString+'>' + rootElem.html() +'</'+newTagString+'>');
	$.each(targetSelector.attributes, function() {
		newElem.attr(this.name, this.value);
	});
	rootElem.replaceWith(newElem);
}